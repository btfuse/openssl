// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 56;
	objects = {

/* Begin PBXFileReference section */
		949DEEE32C485D1100DEDD84 /* libOpenSSL.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libOpenSSL.a; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXGroup section */
		949DEEDA2C485D1100DEDD84 = {
			isa = PBXGroup;
			children = (
				949DEEE42C485D1100DEDD84 /* Products */,
			);
			sourceTree = "<group>";
		};
		949DEEE42C485D1100DEDD84 /* Products */ = {
			isa = PBXGroup;
			children = (
				949DEEE32C485D1100DEDD84 /* libOpenSSL.a */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		949DEEE22C485D1100DEDD84 /* OpenSSL */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 949DEEEC2C485D1100DEDD84 /* Build configuration list for PBXNativeTarget "OpenSSL" */;
			buildPhases = (
				949DEEEF2C485D5600DEDD84 /* Build */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = OpenSSL;
			productName = OpenSSL;
			productReference = 949DEEE32C485D1100DEDD84 /* libOpenSSL.a */;
			productType = "com.apple.product-type.library.static";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		949DEEDB2C485D1100DEDD84 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastUpgradeCheck = 1540;
				TargetAttributes = {
					949DEEE22C485D1100DEDD84 = {
						CreatedOnToolsVersion = 15.4;
					};
				};
			};
			buildConfigurationList = 949DEEDE2C485D1100DEDD84 /* Build configuration list for PBXProject "OpenSSL" */;
			compatibilityVersion = "Xcode 14.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 949DEEDA2C485D1100DEDD84;
			productRefGroup = 949DEEE42C485D1100DEDD84 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				949DEEE22C485D1100DEDD84 /* OpenSSL */,
			);
		};
/* End PBXProject section */

/* Begin PBXShellScriptBuildPhase section */
		949DEEEF2C485D5600DEDD84 /* Build */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			name = Build;
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "# Type a script or drag a script file from your workspace to insert its path.\n\nPROJECT_PATH=`pwd`\n\nPREFIX_ROOT=$BUILT_PRODUCTS_DIR/openssl/\n\nmkdir -p $PREFIX_ROOT\n\n# Async is mainly for specialized hardware and it will cause app store rejections for accessing \"private\" apple APIs.\n# Thus, we will provide no-async flag\n# See https://github.com/openssl/openssl/issues/2545\n\necho \"PWD1: `pwd`\"\n\ncd ../third_party/openssl\n\necho \"PWD2: `pwd`\"\n\nLIBCRYPTO_OK=\"0\"\nLIBSSL_OK=\"0\"\n\nif [ -f \"$PREFIX_ROOT/lib/libcrypto.a\" ]; then\n    LIBCRYPTO_ARCHS=$(lipo -info $PREFIX_ROOT/lib/libcrypto.a)\n    \n    if [[ $ARCHS == *\"arm64\"* && $ARCHS == *\"x86_64\"* ]]; then\n        if [[ $LIBCRYPTO_ARCHS == *\"arm64\"* && $LIBCRYPTO_ARCHS == *\"x86_64\"* ]]; then\n            LIBCRYPTO_OK=\"1\"\n        fi\n    elif [[ $ARCHS == *\"arm64\"* ]]; then\n        if [[ $LIBCRYPTO_ARCHS == *\"arm64\"* ]]; then\n            LIBCRYPTO_OK=\"1\"\n        fi\n    elif [[ $ARCHS == *\"x86_64\"* ]]; then\n        if [[ $LIBCRYPTO_ARCHS == *\"x86_64\"* ]]; then\n            LIBCRYPTO_OK=\"1\"\n        fi\n    fi\nelse\n    echo \"$PREFIX_ROOT/lib/libcrypto.a not found\"\nfi\n\nif [ \"$LIBCRYPTO_OK\" == \"1\" ]; then\n    echo \"libcrypto... OK\"\nelse\n    echo \"libcrypto... NOT OK\"\nfi\n\nif [ -f \"$PREFIX_ROOT/lib/libssl.a\" ]; then\n    LIBSSL_ARCHS=$(lipo -info $PREFIX_ROOT/lib/libssl.a)\n    \n    if [[ $ARCHS == *\"arm64\"* && $ARCHS == *\"x86_64\"* ]]; then\n        if [[ $LIBSSL_ARCHS == *\"arm64\"* && $LIBSSL_ARCHS == *\"x86_64\"* ]]; then\n            LIBSSL_OK=\"1\"\n        fi\n    elif [[ $ARCHS == *\"arm64\"* ]]; then\n        if [[ $LIBSSL_ARCHS == *\"arm64\"* ]]; then\n            LIBSSL_OK=\"1\"\n        fi\n    elif [[ $ARCHS == *\"x86_64\"* ]]; then\n        if [[ $LIBSSL_ARCHS == *\"x86_64\"* ]]; then\n            LIBSSL_OK=\"1\"\n        fi\n    fi\nelse\n    echo \"$PREFIX_ROOT/lib/libssl.a not found\"\nfi\n\nif [ \"$LIBSSL_OK\" == \"1\" ]; then\n    echo \"libssl... OK\"\nelse\n    echo \"libssl... NOT OK\"\nfi\n\nif [ \"$LIBCRYPTO_OK\" == \"1\" ] && [ \"$LIBSSL_OK\" == \"1\" ]; then\n    # OpenSSL is already built and ready\n    exit 0\nelse\n    echo \"OpenSSL hasn't been built, or is built with improper configurations... rebuilding\"\nfi\n\nif [ \"$PLATFORM_NAME\" == \"iphonesimulator\" ]; then\n    # First check and determine if we are building for x86_64\n    if [[ $ARCHS == *\"x86_64\"* ]]; then\n        mkdir -p $PREFIX_ROOT/iphonesimulator/x86_64\n        \n        ./Configure \\\n            --prefix=\"$PREFIX_ROOT/iphonesimulator/x86_64\" \\\n            no-shared \\\n            no-async \\\n            iossimulator-x86_64-xcrun\n        if [ $? -ne 0 ]; then\n            echo \"Configure Failure\"\n            exit 1\n        fi\n        # Build will fail when building for one architecture, and then another without cleaning\n        make clean\n        make -j\n        if [ $? -ne 0 ]; then\n            echo \"iOS Simulator x86_64 Build Failure\"\n            exit 1\n        fi\n        make install\n        if [ $? -ne 0 ]; then\n            echo \"iOS Simulator x86_64 Install Failure\"\n            exit 1\n        fi\n    fi\n    \n    # Then arm64\n    if [[ $ARCHS == *\"arm64\"* ]]; then\n        mkdir -p $PREFIX_ROOT/iphonesimulator/x86_64\n        \n        ./Configure \\\n            --prefix=\"$PREFIX_ROOT/iphonesimulator/arm64\" \\\n            no-shared \\\n            no-async \\\n            iossimulator-arm64-xcrun\n        if [ $? -ne 0 ]; then\n            echo \"Configure Failure\"\n            exit 1\n        fi\n        # Build will fail when building for one architecture, and then another without cleaning\n        make clean\n        make -j\n        if [ $? -ne 0 ]; then\n            echo \"iOS Simulator arm64 Build Failure\"\n            exit 1\n        fi\n        make install\n        if [ $? -ne 0 ]; then\n            echo \"iOS Simulator arm64 Install Failure\"\n            exit 1\n        fi\n    fi\n    \n    rm -rf $PREFIX_ROOT/include\n    rm -rf $PREFIX_ROOT/lib\n    mkdir -p $PREFIX_ROOT/include\n    mkdir -p $PREFIX_ROOT/lib\n    \n    # Then we need to lipo\n    if [[ $ARCHS == *\"arm64\"* && $ARCHS == *\"x86_64\"* ]]; then\n        echo \"Using lipo to combine architectures...\"\n        lipo -create -output $PREFIX_ROOT/lib/libcrypto.a $PREFIX_ROOT/iphonesimulator/x86_64/lib/libcrypto.a $PREFIX_ROOT/iphonesimulator/arm64/lib/libcrypto.a\n        lipo -create -output $PREFIX_ROOT/lib/libssl.a $PREFIX_ROOT/iphonesimulator/x86_64/lib/libssl.a $PREFIX_ROOT/iphonesimulator/arm64/lib/libssl.a\n        cp -r $PREFIX_ROOT/iphonesimulator/arm64/include/* $PREFIX_ROOT/include/\n    elif [[ $ARCHS == *\"arm64\"* ]]; then\n        echo \"Copying arm64 binaries...\"\n        # then we are only building arm64 for this build\n        cp -r $PREFIX_ROOT/iphonesimulator/arm64/include/* $PREFIX_ROOT/include/\n        cp $PREFIX_ROOT/iphonesimulator/arm64/lib/*.a $PREFIX_ROOT/lib/\n    elif [[ $ARCHS == *\"x86_64\"* ]]; then\n        echo \"Copying x86_64 binaries\" \n        # then we are only building x86_64 for this build\n        cp -r $PREFIX_ROOT/iphonesimulator/x86_64/include/* $PREFIX_ROOT/include/\n        cp $PREFIX_ROOT/iphonesimulator/x86_64/lib/*.a $PREFIX_ROOT/lib/\n    else\n        echo \"Unknown Architecture: $ARCHS\"\n        exit 1\n    fi\nelse\n    # then we are building for iPhone Device\n    ./Configure \\\n        --prefix=\"$PREFIX_ROOT/iphone/arm64\" \\\n        no-shared \\\n        no-async \\\n        ios64-xcrun\n    if [ $? -ne 0 ]; then\n        echo \"Configure Failure\"\n        exit 1\n    fi\n    # Build will fail when building for one architecture, and then another without cleaning\n    make clean\n    make -j\n    if [ $? -ne 0 ]; then\n        echo \"iOS arm64 Build Failure\"\n        exit 1\n    fi\n    make install\n    if [ $? -ne 0 ]; then\n        echo \"iOS arm64 Install Failure\"\n        exit 1\n    fi\n    \n    mkdir -p $PREFIX_ROOT/lib\n    mkdir -p $PREFIX_ROOT/include\n    cp -r $PREFIX_ROOT/iphone/arm64/include/* $PREFIX_ROOT/include/\n    cp $PREFIX_ROOT/iphone/arm64/lib/*.a $PREFIX_ROOT/lib/\nfi\n\nlibtool -static -o $BUILT_PRODUCTS_DIR/libopenssl.a $PREFIX_ROOT/lib/libcrypto.a $PREFIX_ROOT/lib/libssl.a \n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin XCBuildConfiguration section */
		949DEEEA2C485D1100DEDD84 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 17.5;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		949DEEEB2C485D1100DEDD84 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 17.5;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		949DEEED2C485D1100DEDD84 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = AF37P8XHYY;
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		949DEEEE2C485D1100DEDD84 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = AF37P8XHYY;
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		949DEEDE2C485D1100DEDD84 /* Build configuration list for PBXProject "OpenSSL" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				949DEEEA2C485D1100DEDD84 /* Debug */,
				949DEEEB2C485D1100DEDD84 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		949DEEEC2C485D1100DEDD84 /* Build configuration list for PBXNativeTarget "OpenSSL" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				949DEEED2C485D1100DEDD84 /* Debug */,
				949DEEEE2C485D1100DEDD84 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 949DEEDB2C485D1100DEDD84 /* Project object */;
}
